material {
    name : DepthOfField,
    parameters : [
        {
           type : sampler2d,
           name : uTexture,
           precision: medium
        },
        {
           type : sampler2d,
           name : uDepth,
           precision: medium
        },
        {
           type : float2,
           name : uPixelSize
        },
        {
           type : float,
           name : focusPoint
        },
        {
           type : float,
           name : focusScale
        }
    ],
    variables : [
        vertex
    ],
    domain : postprocess,
    depthWrite : false,
    depthCulling : false
}

vertex {
    void postProcessVertex(inout PostProcessVertexInputs postProcess) {
        postProcess.vertex.xy = postProcess.normalizedUV;
    }
}

fragment {

void foo() {}  // twart the IDE

const float SAMPLE_COUNT = 80.0;
const float SPIRAL_COUNT = 6.0;
const float MAX_BLUR_SIZE = 20.0;

// random number between 0 and 1, using interleaved gradient noise
float random(vec2 w) {
    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);
    return fract(m.z * fract(dot(w, m.xy)));
}

vec3 tapLocation(float i, const float noise) {
    // note: with this formulation we could precompute the samples in an array
    //       and combine the noise, which would allow is to call sin/cos only
    //       once per pixel.
    float radius = (i + 0.5) / (SAMPLE_COUNT - 0.5);
    radius = sqrt(radius);
    float angle = (radius * SPIRAL_COUNT + noise) * (2.0 * PI);
    return vec3(cos(angle), sin(angle), radius);
}

float getBlurSize(float depth, float focusPoint, float focusScale) {
    return saturate(abs(focusPoint - depth) * focusScale) * MAX_BLUR_SIZE;
}

vec3 depthOfField(vec2 texCoord, float focusPoint, float focusScale) {
    float noise = random(gl_FragCoord.xy);
    float centerDepth = textureLod(materialParams_uDepth, texCoord, 0.0).r;
    float centerSize = getBlurSize(centerDepth, focusPoint, focusScale);
    vec3 color = textureLod(materialParams_uTexture, texCoord, 0.0).rgb;
    for (float i = 0.0 ; i < SAMPLE_COUNT ; i += 1.0) {

        vec3 tap = tapLocation(i, noise);
        float radius = tap.z * centerSize;  // or should it be MAX_BLUR_SIZE?
        vec2 tc = texCoord + tap.xy * materialParams.uPixelSize * radius;

        vec3 sampleColor = textureLod(materialParams_uTexture, tc, 0.0).rgb;
        float sampleDepth = textureLod(materialParams_uDepth, tc, 0.0).r;
        float sampleSize = getBlurSize(sampleDepth, focusPoint, focusScale);
        if (sampleDepth > centerDepth) {
            sampleSize = min(sampleSize, centerSize * 2.0);
        }

        float m = smoothstep(radius - 0.5, radius + 0.5, sampleSize);
        color += mix(color * (1.0 / (i + 1.0)), sampleColor, m);
    }
    color = color * (1.0 / (SAMPLE_COUNT + 1.0));
//    ivec2 coords = ivec2(gl_FragCoord.xy);
//    color += dFdx(color) * (0.5 - float(coords.x & 1));
//    color += dFdy(color) * (0.5 - float(coords.y & 1));
    return color;
}

void postProcess(inout PostProcessInputs postProcess) {
    highp vec2 uv = variable_vertex.xy;
    postProcess.color.rgb = depthOfField(uv, materialParams.focusPoint, materialParams.focusScale);
}

}
